import com.mysql.jdbc.Driver;

import java.sql.*;

public class JbdcLecture {
    public static void main(String[] args) throws SQLException {
        // instantiate the MySQL Driver to register to the built in Java Driver Manager
        DriverManager.registerDriver(new Driver());

            // connect to the database by providing the URL, user and the password of the user we want to connect as
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/codeup_test_db?serverTimezone=UTC&useSSL=false",
                    "naysamoreno",
                    "snowysnowsterislife");
            // We can use the Statment object to make our queries
            Statement stmt = connection.createStatement();

            // returns true or false if the row has been deleted and if it does not exist it will return false
//            stmt.execute("DELETE FROM albums WHERE id = 4");


        // returns the number of rows affected
//        stmt.executeUpdate("");

//        // returns a ResultSet object
//        stmt.executeQuery("SELECT * FROM albums");

        // Handling the results with the ResultSet object

        String selectQuery = "SELECT * FROM quotes";
        ResultSet rs = stmt.executeQuery(selectQuery);


        // By calling the .next() method we can iterate over the rows
        //The method will return as true as long as there are rows left in our results
//        Therefore the most common way to handle the results is to use a while loop

        while(rs.next()) {
            System.out.println("Here's an quote: ");
            System.out.println(" id: "+ rs.getLong("id"));
            System.out.println("artist: " + rs.getString("author_first_name"));
            System.out.println("name: " + rs.getString("author_last_name"));

        }

        // Insert query
        String insertQuery = "INSERT INTO quotes (author_first_name, author_last_name) VALUES";

        // for executeUpdate method,  we can have two arguments:
        // first the Query string we want to execute
        //second is a constant from the statement object
//        This gives us access to the ID's that are automatically generated by the database'

//        stmt.executeUpdate(insertQuery, Statement.RETURN_GENERATED_KEYS);

        // We can then use the getGeneratedKeys() method on the ResultSet object which will hold any IDs generated by the database

//        ResultSet rsKeys = stmt.getGeneratedKeys();

//        if(rsKeys.next()){
//            System.out.println("Inserted a new quote New ID: " = rsKeys.getLong());
//        }


    }
}
